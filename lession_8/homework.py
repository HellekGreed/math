from scipy import stats
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

print('Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):')
print('zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110]')
print('ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832]')
print('Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy')
print('Полученные значения должны быть равны.')
print('Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков, а затем с использованием функций из библиотек numpy и pandas.')
print()
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

plt.scatter(zp,ks)
plt.show()

cov_r = (zp * ks).mean() - zp.mean() * ks.mean()
cov = np.cov(zp, ks, ddof=0)

print(f'Ковариация рассчитанная вручную: {round(cov_r,2)}')
print(f'Ковариация рассчитанная при помощи numpy: {round(cov[0][1],2)}')

coef_p = np.cov(zp, ks, ddof=1)[0, 1] / (zp.std(ddof=1) * ks.std(ddof=1))

print(f'Несмещенное стандартное октлонение zp: {round(zp.std(ddof=1),2)}')
print(f'Несмещенное стандартное октлонение ks: {round(ks.std(ddof=1),2)}')
print(f'Коэффициент корреляции Пирсона рассчитанный вручную: {round(coef_p,2)}')
print(f'Коэффициент корреляции Пирсона рассчитанный при помощи numpy: {round(np.corrcoef(zp,ks)[0,1],2)}')
print(f'Коэффициент корреляции Пирсона рассчитанный при помощи pandas: {round(pd.DataFrame([zp,ks]).T.corr()[0][1],2)}')

print()
print('Измерены значения IQ выборки студентов,')
print('обучающихся в местных технических вузах:')
print('131, 125, 115, 122, 131, 115, 107, 99, 125, 111')
print('Известно, что в генеральной совокупности IQ распределен нормально.')
print('Найдите доверительный интервал для математического ожидания с надежностью 0.95')
print()
x = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])
t = stats.t.ppf(1 - 0.05 / 2, x.size - 1)

print(f'Выборочное среднее: {round(x.mean(), 2)}')
print(f'Несмещенное стандартное октлонение: {round(x.std(ddof=1) ,2)}')
print(f'Коэффициент стьюдента: {round(t, 2)}')

interval_r = (x.mean() - t * x.std(ddof=1) / x.size**0.5, x.mean() + t * x.std(ddof=1) / x.size**0.5)
interval_t = stats.t.interval(confidence=0.95, df=x.size - 1, loc=x.mean(), scale=stats.sem(x))

print(f'Доверительный интервал рассчитанный вручную: {np.array(interval_r).round(2)}')
print(f'Доверительный интервал рассчитанный при помощи stats: {np.array(interval_t).round(2)}')

print()
print('Известно, что рост футболистов в сборной распределен нормально с дисперсией генеральной совокупности,')
print('равной 25 кв.см. Объем выборки равен 27, среднее выборочное составляет 174.2')
print('Найдите доверительный интервал для математического ожидания с надежностью 0.95')
print()

print(f"Коэффициент z: {round(stats.norm.ppf(1 - 0.05 / 2), 2)}")

interval_r = (174.2 - stats.norm.ppf(1 - 0.05 / 2) * (25 / 27)**0.5, 174.2 + stats.norm.ppf(1 - 0.05 / 2) * (25 / 27)**0.5)
interval_z = stats.norm.interval(0.95, loc=174.2, scale=(25 / 27)**0.5)

print(f'Доверительный интервал рассчитанный вручную: {np.array(interval_r).round(2)}')
print(f'Доверительный интервал рассчитанный при помощи stats: {np.array(interval_z).round(2)}')
